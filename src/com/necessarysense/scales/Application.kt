package com.necessarysense.scales

fun main(args: Array<String>) {
    val key = Key(Scale.findNoteName("C"))
    val ionian = key.ionianOf()
    println("Ionian: ${ionian.mkString()}")
    val tonic = ionian.chord(ChordName.I)
    val tonicSeventh = ionian.chord(ChordName.I, ChordType.SEVENTH)
    val dominant = ionian.chord(ChordName.V)
    val dominantSeventh = ionian.chord(ChordName.V, ChordType.SEVENTH)
    println("\tTonic: ${tonic.spell()}")
    println("\tTonic Seventh: ${tonicSeventh.spell()}")
    println("\tDominant: ${dominant.spell()}")
    println("\tDominant Seventh: ${dominantSeventh.spell()}")
    println("Dorian: ${key.dorianOf().mkString()}")
    val phrygian = key.phrygianOf()
    val phrygTonic = phrygian.chord(ChordName.I)
    val phrygTonicSeventh = phrygian.chord(ChordName.I, ChordType.SEVENTH)
    val phrygDominant = phrygian.chord(ChordName.V)
    val phrygDominantSeventh = phrygian.chord(ChordName.V, ChordType.SEVENTH)
    println("Phrygian: ${phrygian.mkString()}")
    println("\tTonic: ${phrygTonic.spell()}")
    println("\tTonic Seventh: ${phrygTonicSeventh.spell()}")
    println("\tDominant: ${phrygDominant.spell()}")
    println("\tDominant Seventh: ${phrygDominantSeventh.spell()}")
    println("Lydian: ${key.lydianOf().mkString()}")
    println("Mixolydian: ${key.mixolydianOf().mkString()}")
    println("Aeolian: ${key.aeolianOf().mkString()}")
    println("Locrian: ${key.locrianOf().mkString()}")
}
